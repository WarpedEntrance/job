[{"title":"Indevlopment","type":0,"sectionRef":"#","url":"/job/docs/indev","content":"","keywords":""},{"title":"Job is not done!​","type":1,"pageTitle":"Indevlopment","url":"/job/docs/indev#job-is-not-done","content":"I plan to expand Job to have more functions and abilites so dont expect only this. "},{"title":"Job","type":0,"sectionRef":"#","url":"/job/docs/intro","content":"","keywords":""},{"title":"Performance​","type":1,"pageTitle":"Job","url":"/job/docs/intro#performance","content":"Job is not a resource hog and can help get assets faster and keep your code more organized! "},{"title":"Using Job to get modules","type":0,"sectionRef":"#","url":"/job/docs/geting-modules","content":"Using Job to get modules Here is one code example of geting a module using Job local Overture = require(game.ReplicatedStorage.CodeBase.Job):LoadModule(&quot;Overture&quot;) local Memoize = Overture:LoadLibrary(&quot;Memoize&quot;) local sPlayers = Overture:LoadLibrary(&quot;sPlayers&quot;) local VariableManager = Overture:LoadLibrary(&quot;VariableManager&quot;) In this example we use Job to get Overture and then use Overture to get some libaries This can be done without overture too! Just by replaceing Overture:LoadLibary(&quot;NameOfLibary&quot;) to Job:LoadModule(&quot;NameOfLibary&quot;)","keywords":""},{"title":"Geting folders","type":0,"sectionRef":"#","url":"/job/docs/folders","content":"Geting folders Using Job to get Folders In this code example we get a folder named &quot;Assets&quot; and then get some assets from this folder local Job = path.to.job local Assets = Job:GetFolder(&quot;Assets&quot;) -- Job will search for a folder named assets Assets.FireEffect:Clone() FireEffect.Parent = instance.new(&quot;Part&quot;) ","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/job/docs/getting-started","content":"Getting Started To get started useing Job you must have the code in your game, to do so make a module within game/replicatedstorage after doing so you can name it whatever you want but that will be what you use to require it so keep that in mind. (I recommend using Job to keep it clean and simple) After doing so paste the code into the module you made. -- @author Sharky65749 -- @ClassInfo Job is a way to have all assets organized and for client to server stuff local Job = {}; local CollectionService = game:GetService(&quot;CollectionService&quot;); local RunService = game:GetService(&quot;RunService&quot;); Job.Initialised = true if RunService:IsServer() then print(&quot;Server: Initialising Job...&quot;); for i, JobAsset in pairs(game:GetService(&quot;ReplicatedStorage&quot;):GetDescendants()) do if JobAsset:IsA(&quot;Folder&quot;) then CollectionService:AddTag(JobAsset, &quot;JobFolder&quot;); elseif JobAsset:IsA(&quot;ModuleScript&quot;) and JobAsset ~= script then CollectionService:AddTag(JobAsset, &quot;JobModule&quot;); end; end; for i, JobStorageAssets in pairs(game:GetService(&quot;ServerStorage&quot;):GetDescendants()) do if JobStorageAssets:IsA(&quot;Folder&quot;) then CollectionService:AddTag(JobStorageAssets, &quot;JobFolder&quot;); elseif JobStorageAssets:IsA(&quot;ModuleScript&quot;) then CollectionService:AddTag(JobStorageAssets, &quot;JobModule&quot;); end; end; for i, JobScript in pairs(game:GetService(&quot;ServerScriptService&quot;):GetDescendants()) do if JobScript:IsA(&quot;Folder&quot;) then CollectionService:AddTag(JobScript, &quot;JobFolder&quot;); elseif JobScript:IsA(&quot;ModuleScript&quot;) then CollectionService:AddTag(JobScript, &quot;JobModule&quot;); end; end; Job.Initialised = true; game:GetService(&quot;CollectionService&quot;):AddTag(script, &quot;JobInitialised&quot;); else print(&quot;Client: Initialising Job...&quot;); if CollectionService:HasTag(script, &quot;JobInitialised&quot;) == false then local JobInitialised = nil; JobInitialised = CollectionService:GetInstanceAddedSignal(&quot;JobInitialised&quot;):Connect(function(Job) if JobInitialised == script then Job.Initialised = true; JobInitialised:Disconnect(); JobInitialised = nil; end; end); else Job.Initialised = true; end; end; print(&quot;Job initialised&quot;); function Job.LoadModule(Job, Module) if Job.Initialised == true then for i, JobModule in pairs(CollectionService:GetTagged(&quot;JobModule&quot;)) do if JobModule.Name == Module then return require(JobModule); end; end; error(&quot;Requested module \\&quot;&quot; .. Module .. &quot;\\&quot; was not found!&quot;); return; end; warn(&quot;Job has not been initialised. Script performance may decrease.&quot;); for i, RepJobModule in pairs(game:GetService(&quot;ReplicatedStorage&quot;):GetDescendants()) do if RepJobModule:IsA(&quot;ModuleScript&quot;) and RepJobModule.Name == Module then return require(RepJobModule); end; end; if not RunService:IsServer() then error(&quot;Requested module \\&quot;&quot; .. Module .. &quot;\\&quot; was not found!&quot;); return; end; for i, ServerStoreModule in pairs(game:GetService(&quot;ServerStorage&quot;):GetDescendants()) do if ServerStoreModule:IsA(&quot;ModuleScript&quot;) and ServerStoreModule.Name == Module then return require(ServerStoreModule); end; end; for i, JobScriptModule in pairs(game:GetService(&quot;ServerScriptService&quot;):GetDescendants()) do if JobScriptModule:IsA(&quot;ModuleScript&quot;) and JobScriptModule.Name == Module then return require(JobScriptModule); end; end; error(&quot;Requested module \\&quot;&quot; .. Module .. &quot;\\&quot; was not found!&quot;); end; function Job.GetFolder(Job, Folder) if Job.Initialised == true then for i, JobFolder in pairs(CollectionService:GetTagged(&quot;JobFolder&quot;)) do if JobFolder.Name == Folder then return JobFolder; end; end; error(&quot;Requested folder \\&quot;&quot; .. Folder .. &quot;\\&quot; was not found!&quot;); return; end; for i, JobFolderRep in pairs(game:GetService(&quot;ReplicatedStorage&quot;):GetDescendants()) do if JobFolderRep:IsA(&quot;Folder&quot;) and JobFolderRep.Name == Folder then return JobFolderRep; end; end; if not RunService:IsServer() then error(&quot;Requested folder \\&quot;&quot; .. Folder .. &quot;\\&quot; was not found!&quot;); return; end; for i, ServerJobFolder in pairs(game:GetService(&quot;ServerStorage&quot;):GetDescendants()) do if ServerJobFolder:IsA(&quot;Folder&quot;) and ServerJobFolder.Name == Folder then return ServerJobFolder; end; end; for i, JobFolderScript in pairs(game:GetService(&quot;ServerScriptService&quot;):GetDescendants()) do if JobFolderScript:IsA(&quot;Folder&quot;) and JobFolderScript.Name == Folder then return JobFolderScript; end; end; error(&quot;Requested folder \\&quot;&quot; .. Folder .. &quot;\\&quot; was not found!&quot;); end; return Job; After doing so head over to the next page to see how to use it!","keywords":""}]